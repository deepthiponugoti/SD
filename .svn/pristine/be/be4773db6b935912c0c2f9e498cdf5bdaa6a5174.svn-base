package assign3;

import org.apache.commons.lang3.tuple.Pair;

import java.util.Map;
import java.util.TreeMap;
import java.util.stream.IntStream;

public class FibonacciNumbers {

    public int getValueIterative(int position) {

        if(position == 0 || position == 1)
            return 1;

        Pair<Integer, Integer> initial = Pair.of(1, 1);

        return IntStream.rangeClosed(2, position)
                        .mapToObj(i -> Pair.of(i, 0))
                        .reduce(initial, (prev, ignore) -> Pair.of(prev.getRight(), prev.getLeft() + prev.getRight()))
                        .getRight();
    }

        public int getValueRecursive(int position){
            if(position == 0 || position == 1)
                return 1;

             return getValueRecursive(position - 1) + getValueRecursive(position - 2);
        }

    public static int getValueMemorized(int position) {
        Map<Integer, Integer> NumberMap = new TreeMap<Integer, Integer>();
        if (position ==0 || position == 1)
            return 1;

        if (NumberMap.get(position) == null)
        {
            NumberMap.computeIfAbsent(position, k -> getValueMemorized(position - 1) + getValueMemorized(position - 2));
        }
        return NumberMap.get(position);

    }
    }

